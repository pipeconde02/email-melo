import express from "express";
import bodyParser from "body-parser";
import imaps from "imap-simple";
import cors from "cors";
import fs from "fs";
import http from "http"; // Importar http
import https from "https"; // Importar https
import formatEmail from "./formatEmail.js"; // Importa la función para formatear el email

const app = express();
const corsOptions = {
  origin: "*", // Permitir cualquier origen
};
app.use(cors(corsOptions));
app.use(bodyParser.json());

// Cargar asuntos a omitir desde omitSubjects.json
const omitSubjects = JSON.parse(
  fs.readFileSync("./omitSubjects.json", "utf8")
).subjectsToOmit;

// Configuración del servidor HTTPS
const sslOptions = {
  key: fs.readFileSync("./selfsigned.key"), // Archivo clave privada
  cert: fs.readFileSync("./selfsigned.crt"), // Archivo certificado
};

// Función para extraer solo texto plano del cuerpo del correo
const extractPlainText = (htmlBody) => {
  const text = htmlBody.replace(/<[^>]*>/g, ""); // Eliminar etiquetas HTML
  return text.replace(/=\r?\n/g, ""); // Eliminar codificación MIME (si aplica)
};

// Endpoint para obtener correos
app.post("/emails", async (req, res) => {
  const { email } = req.body; // El correo que nos envía el usuario

  const config = {
    imap: {
      user: "cuentas@zonasocial.co",
      password: "Correr2025*",
      host: "zonasocial.co",
      port: 993,
      tls: true,
      tlsOptions: { rejectUnauthorized: false }, // Desactiva la validación del certificado
    },
  };

  try {
    console.log("Intentando conectar al servidor IMAP...");
    const connection = await imaps.connect(config);
    console.log("Conexión exitosa al servidor IMAP.");

    console.log("Abriendo buzón INBOX...");
    await connection.openBox("INBOX");
    console.log("Buzón INBOX abierto.");

    const oneHourAgo = new Date();
    oneHourAgo.setHours(oneHourAgo.getHours() - 1);
    const sinceTime = oneHourAgo.toISOString();
    console.log(`Fecha de búsqueda (última hora): ${sinceTime}`);

    const searchCriteria = [
      ["TO", email],
      ["SINCE", sinceTime],
    ];

    const fetchOptions = { bodies: ["HEADER", "TEXT"], markSeen: false };
    const messages = await connection.search(searchCriteria, fetchOptions);

    const emails = messages
      .map((message) => {
        const subject = message.parts.find((part) => part.which === "HEADER").body.subject[0];
        const from = message.parts.find((part) => part.which === "HEADER").body.from[0];
        const date = message.attributes.date;
        const body = message.parts.find((part) => part.which === "TEXT").body;

        const plainBody = extractPlainText(body);
        const formattedBody = formatEmail(plainBody);

        return { subject, from, date, body: formattedBody };
      })
      .filter((email) => {
        const shouldOmit = omitSubjects.some((omitSubject) =>
          email.subject.includes(omitSubject)
        );
        return !shouldOmit;
      });

    connection.end();
    res.json(emails);
  } catch (error) {
    console.error("Error fetching emails:", error);
    res.status(500).json({ error: "Error fetching emails" });
  }
});

// Crear el servidor HTTP
http.createServer(app).listen(5000, () => {
  console.log("Server running on http://localhost:5000");
});

// Crear el servidor HTTPS
https.createServer(sslOptions, app).listen(5001, () => {
  console.log("Server running on https://localhost:5001");
});
